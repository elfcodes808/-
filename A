-- Load the Ray Field GUI Library 
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Variables
local silentAimActive = false
local aimbotActive = false
local espActive = false
local fovActive = false
local currentOpponent = nil
local fovCircle = Drawing.new("Circle")
local aimbotRange = 150
local aimbotSmoothness = 5
local espBoxes = {}
local fovRadius = 100
local aimPartName = "Head"  -- Default

local espBoxEnabled = true
local espNameEnabled = true
local espHealthEnabled = true
local espTracerEnabled = true

local rapidFireEnabled = false
local rapidFireStrength = 5

-- Create Rayfield Window
local Window = Rayfield:CreateWindow({ Name = "ShadowZ Hub | Arsenal V1.0", LoadingTitle = "Loading Arsenal...", LoadingSubtitle = "by ShadowZ üòé", IntroEnabled = false })

-- Create Tabs
local CombatTab = Window:CreateTab("Combat ‚öîÔ∏è", 4483362458)
local VisualsTab = Window:CreateTab("Visuals üëÄ", 4483362458)
local CreditsTab = Window:CreateTab("Credits üíé", 4483362458)
CombatTab:CreateSection("üî• This is V1.0 üî•")

local function isEnemy(player)
    if not player.Team or not LocalPlayer.Team then return true end
    return player.Team ~= LocalPlayer.Team
end

local function getOpponent()
    local closest = nil
    local shortestDist = math.huge
    local mousePos = UserInputService:GetMouseLocation()

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and isEnemy(player) and player.Character then
            local targetPart = player.Character:FindFirstChild(aimPartName)
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            if targetPart and hrp then
                local screenPos, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
                local distToMouse = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                local distToPlayer = (hrp.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

                if onScreen and distToMouse <= fovRadius and distToPlayer <= aimbotRange and distToMouse < shortestDist then
                    shortestDist = distToMouse
                    closest = player
                end
            end
        end
    end

    return closest
end

RunService.RenderStepped:Connect(function()
    if aimbotActive or silentAimActive then
        currentOpponent = getOpponent()
    else
        currentOpponent = nil
    end
end)

RunService.RenderStepped:Connect(function()
    if aimbotActive and currentOpponent and currentOpponent.Character then
        local targetPart = currentOpponent.Character:FindFirstChild(aimPartName)
        if targetPart then
            local targetPos = targetPart.Position + Vector3.new(0, 0.1, 0)
            local newCFrame = CFrame.new(Camera.CFrame.Position, targetPos)
            Camera.CFrame = Camera.CFrame:Lerp(newCFrame, 1 / aimbotSmoothness)
        end
    end
end)

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and silentAimActive and currentOpponent and currentOpponent.Character then
        local targetPart = currentOpponent.Character:FindFirstChild(aimPartName)
        if targetPart then
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPart.Position)
            local remotesFolder = ReplicatedStorage:FindFirstChild("Remotes")
            if remotesFolder then
                local attackRemote = remotesFolder:FindFirstChild("Attack")
                if attackRemote then
                    for i = 1, rapidFireEnabled and rapidFireStrength or 1 do
                        attackRemote:FireServer(targetPart)
                    end
                end
            end
        end
    end
end)

local function updateESP()
    if espActive then
        for _, player in pairs(Players:GetPlayers()) do
            local char = player.Character
            if player ~= LocalPlayer and char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") and isEnemy(player) then
                local head = char:FindFirstChild("Head")
                local root = char:FindFirstChild("HumanoidRootPart")
                if head and root then
                    local rootPos, rootVisible = Camera:WorldToViewportPoint(root.Position)
                    local headPos, headVisible = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 0.5, 0))

                    if not espBoxes[player] then
                        espBoxes[player] = {
                            box = Drawing.new("Quad"),
                            name = Drawing.new("Text"),
                            health = Drawing.new("Text"),
                            tracer = Drawing.new("Line"),
                        }
                        local box = espBoxes[player]
                        box.box.Thickness = 2
                        box.box.Color = Color3.fromRGB(255, 0, 0)
                        box.box.Transparency = 1
                        box.name.Center = true
                        box.name.Outline = true
                        box.name.Color = Color3.fromRGB(255, 0, 0)
                        box.name.Size = 14
                        box.health.Center = true
                        box.health.Outline = true
                        box.health.Color = Color3.fromRGB(255, 0, 0)
                        box.health.Size = 14
                        box.tracer.Color = Color3.fromRGB(255, 0, 0)
                        box.tracer.Thickness = 1
                        box.tracer.Transparency = 1
                    end

                    local box = espBoxes[player]
                    if rootVisible and headVisible then
                        local boxWidth = 30
                        local boxHeight = (rootPos.Y - headPos.Y) + 15
                        box.box.PointA = Vector2.new(rootPos.X - boxWidth / 2, headPos.Y)
                        box.box.PointB = Vector2.new(rootPos.X + boxWidth / 2, headPos.Y)
                        box.box.PointC = Vector2.new(rootPos.X + boxWidth / 2, rootPos.Y + 15)
                        box.box.PointD = Vector2.new(rootPos.X - boxWidth / 2, rootPos.Y + 15)
                        box.box.Visible = espBoxEnabled

                        box.name.Position = Vector2.new(rootPos.X, headPos.Y - 15)
                        box.name.Text = player.Name
                        box.name.Visible = espNameEnabled

                        local hp = char.Humanoid.Health
                        local maxHp = char.Humanoid.MaxHealth
                        box.health.Position = Vector2.new(rootPos.X, headPos.Y - 3)
                        box.health.Text = ("HP: %d/%d"):format(math.floor(hp), maxHp)
                        box.health.Visible = espHealthEnabled

                        local screenSize = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                        box.tracer.From = screenSize
                        box.tracer.To = Vector2.new(rootPos.X, rootPos.Y + 15)
                        box.tracer.Visible = espTracerEnabled
                    else
                        box.box.Visible = false
                        box.name.Visible = false
                        box.health.Visible = false
                        box.tracer.Visible = false
                    end
                end
            elseif espBoxes[player] then
                local box = espBoxes[player]
                box.box.Visible = false
                box.name.Visible = false
                box.health.Visible = false
                box.tracer.Visible = false
            end
        end
    else
        for _, box in pairs(espBoxes) do
            box.box.Visible = false
            box.name.Visible = false
            box.health.Visible = false
            box.tracer.Visible = false
        end
    end
end

CombatTab:CreateToggle({ Name = "üéØ Silent Aim", CurrentValue = false, Flag = "silentAimToggle", Callback = function(val) silentAimActive = val end })
CombatTab:CreateToggle({ Name = "üî´ Aimbot Lock-On", CurrentValue = false, Flag = "aimbotToggle", Callback = function(val) aimbotActive = val end })
CombatTab:CreateSlider({ Name = "üìè Aimbot Range", Range = {50, 300}, Increment = 10, CurrentValue = 150, Callback = function(val) aimbotRange = val end })
CombatTab:CreateSlider({ Name = "‚ö° Aimbot Smoothness", Range = {1, 10}, Increment = 1, CurrentValue = 5, Callback = function(val) aimbotSmoothness = val end })
CombatTab:CreateDropdown({ Name = "üéØ Aim Target Part", Options = {"Head", "Torso", "Neck"}, CurrentOption = "Head", Flag = "aimPartDropdown", Callback = function(option) aimPartName = option end })

CombatTab:CreateToggle({
    Name = "üî• Rapid Fire",
    CurrentValue = false,
    Flag = "rapidFireToggle",
    Callback = function(val)
        rapidFireEnabled = val
    end
})

CombatTab:CreateSlider({
    Name = "üí• Rapid Fire Strength",
    Range = {1, 10},
    Increment = 1,
    CurrentValue = 5,
    Callback = function(val)
        rapidFireStrength = val
    end
})

VisualsTab:CreateToggle({ Name = "üëÄ Player ESP (Enemies Only)", CurrentValue = false, Flag = "espToggle", Callback = function(val) espActive = val updateESP() end })
VisualsTab:CreateToggle({ Name = "üì¶ ESP Box", CurrentValue = true, Flag = "espBox", Callback = function(val) espBoxEnabled = val end })
VisualsTab:CreateToggle({ Name = "üìù Name ESP", CurrentValue = true, Flag = "espName", Callback = function(val) espNameEnabled = val end })
VisualsTab:CreateToggle({ Name = "‚ù§Ô∏è Health ESP", CurrentValue = true, Flag = "espHealth", Callback = function(val) espHealthEnabled = val end })
VisualsTab:CreateToggle({ Name = "üßµ Tracer ESP", CurrentValue = true, Flag = "espTracer", Callback = function(val) espTracerEnabled = val end })
VisualsTab:CreateToggle({ Name = "üîµ FOV Circle", CurrentValue = false, Flag = "fovToggle", Callback = function(val) fovActive = val fovCircle.Visible = val end })
VisualsTab:CreateSlider({ Name = "üìè FOV Size", Range = {50, 200}, Increment = 10, CurrentValue = 100, Callback = function(val) fovCircle.Radius = val fovRadius = val end })

fovCircle.Color = Color3.fromRGB(0, 0, 255)
fovCircle.Thickness = 2
fovCircle.Filled = false
fovCircle.Transparency = 1
fovCircle.Visible = false

RunService.RenderStepped:Connect(function()
    if fovActive then
        fovCircle.Position = UserInputService:GetMouseLocation()
    end
    if espActive then
        updateESP()
    end
end)

CreditsTab:CreateSection("üíé Made by ShadowZ üíé")

print("üî• ShadowZ Hub for Arsenal (V1.0) Loaded Successfully!")
